return {
	--  "neovim/nvim-lspconfig",
	--  dependencies = {
	--    -- masson
	--    "williamboman/mason.nvim",
	--    "williamboman/mason-lspconfig.nvim",
	--
	--    "nvim-lua/plenary.nvim",
	--    "hrsh7th/cmp-nvim-lsp",
	--    "hrsh7th/cmp-buffer",
	--    "hrsh7th/cmp-path",
	--    "hrsh7th/cmp-cmdline",
	--    "zbirenbaum/copilot-cmp",
	--    "hrsh7th/nvim-cmp",
	--    "hrsh7th/cmp-nvim-lsp-signature-help",
	--  },
	--  config = function()
	--    local cmp = require('cmp')
	--    local capabilities = require('cmp_nvim_lsp').default_capabilities()
	--
	--    local on_attach = function(client, bufnr)
	--      local opts = { noremap = true, silent = true, buffer = bufnr }
	--      vim.keymap.set("n", "gd", function() vim.lsp.buf.definition() end, opts)
	--      vim.keymap.set("n", "K", function() vim.lsp.buf.hover() end, opts)
	--      vim.keymap.set('n', 'gi', function()  vim.lsp.buf.implementation() end, opts)
	--      vim.keymap.set('n', 'gr', function()  vim.lsp.buf.references() end, opts)
	--      vim.keymap.set('n', '<leader>r', function()  vim.lsp.buf.rename() end, opts)
	--      vim.keymap.set('n', '<leader>a', function()  vim.lsp.buf.code_action() end, opts)
	--      vim.keymap.set('n', '[e', function()  vim.diagnostic.goto_prev() end, opts)
	--      vim.keymap.set('n', ']e', function()  vim.diagnostic.goto_next() end, opts)
	--      vim.keymap.set('n', '<leader>e', function()  vim.diagnostic.setloclist() end, opts)
	--    end
	--
	--
	--    require("mason").setup()
	--    require("mason-lspconfig").setup()
	--
	--    local lspconfig = require('lspconfig')
	--    local servers = { 'clangd', 'pyright', 'lua_ls', 'ts_ls' }
	--    for _, lsp in ipairs(servers) do
	--      lspconfig[lsp].setup {
	--        on_attach = on_attach,
	--        capabilities = capabilities,
	--      }
	--    end
	--    require'lspconfig'.rust_analyzer.setup({
	--      cmd = { "rust-analyzer" },
	--      root_dir = function(fname)
	--        return vim.fn.fnamemodify(fname, ":p:h:h")  -- Navigate up two directories
	--      end,
	--      settings = {
	--        ["rust-analyzer"] = {
	--          cargo = { allFeatures = true },
	--          procMacro = { enable = true },
	--        },
	--      },
	--    })
	--
	--    local cmp_select = { behavior = cmp.SelectBehavior.Select }
	--    require("copilot_cmp").setup()
	--    cmp.setup({
	--      ghost_text = { enabled = true },
	--      view = {entries = {name = 'custom', selection_order = 'near_cursor' } },
	--      formatting = {
	--        format = function(entry, vim_item)
	--          -- Source
	--          vim_item.menu = ({
	--            buffer = "[Buffer]",
	--            copilot = "[Copilot]",
	--            path = "[Path]",
	--            nvim_lsp = "[LSP]",
	--          })[entry.source.name] or "[TODO: Add mapping]"
	--          return vim_item
	--        end
	--      },
	--      snippet = {
	--        expand = function(args)
	--          vim.snippet.expand(args.body)
	--        end,
	--      },
	--      mapping = cmp.mapping.preset.insert({
	--        ['<C-b>'] = cmp.mapping.scroll_docs(-4),
	--        ['<C-f>'] = cmp.mapping.scroll_docs(4),
	--        ['<C-p>'] = cmp.mapping.select_prev_item(cmp_select),
	--        ['<C-n>'] = cmp.mapping.select_next_item(cmp_select),
	--        ["<C-Space>"] = cmp.mapping.complete(),
	--        ['<Tab>'] = cmp.mapping(function(fallback)
	--          print('tab')
	--          if cmp.visible() then
	--            print('cmp')
	--            if vim.snippet.active() then
	--              print('snippet')
	--              vim.snippet.expand()
	--            else
	--              local entry = cmp.get_selected_entry()
	--              if not entry then
	--                cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
	--              end
	--              cmp.confirm( { select = true } )
	--            end
	--          else
	--            fallback()
	--          end
	--        end, { "i", "s" }),
	--      }),
	--      sources = cmp.config.sources({
	--        { name = 'copilot' },
	--        { name = 'nvim_lsp' , max_item_count = 5},
	--        { name = 'nvim_lsp_signature_help' },
	--        { name = 'buffer', max_item_count = 3 },
	--        { name = 'path' , max_item_count = 3},
	--      }),
	--      experimental = { native_menu = false, ghost_text = { enabled = true } },
	--      sorting = {
	--        priority_weight = 2,
	--        comparators = {
	--          require("copilot_cmp.comparators").prioritize,
	--
	--          -- Below is the default comparitor list and order for nvim-cmp
	--          cmp.config.compare.offset,
	--          -- cmp.config.compare.scopes, --this is commented in nvim-cmp too
	--          cmp.config.compare.exact,
	--          cmp.config.compare.score,
	--          cmp.config.compare.recently_used,
	--          cmp.config.compare.locality,
	--          cmp.config.compare.kind,
	--          cmp.config.compare.sort_text,
	--          cmp.config.compare.length,
	--          cmp.config.compare.order,
	--        },
	--      },
	--    })
	--    -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
	--    cmp.setup.cmdline({ '/', '?' }, {
	--      mapping = cmp.mapping.preset.cmdline(),
	--      sources = {
	--        { name = "nvim_lsp_document_symbol", max_item_count = 8, keyword_length = 3 },
	--        { name = 'buffer' },
	--      }
	--    })
	--
	--    -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
	--    cmp.setup.cmdline(':', {
	--      mapping = cmp.mapping.preset.cmdline(),
	--      sources = cmp.config.sources({
	--        { name = 'path' }
	--      }, {
	--          { name = 'cmdline' }
	--        }),
	--      matching = { disallow_symbol_nonprefix_matching = false }
	--    })
	--
	--    vim.diagnostic.config({
	--      -- update_in_insert = true,
	--      float = {
	--        focusable = false,
	--        style = "minimal",
	--        border = "rounded",
	--        source = "always",
	--        header = "",
	--        prefix = "",
	--      },
	--    })
	--  end
}
